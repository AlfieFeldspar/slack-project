{"version":3,"sources":["actions/index.js","reducers/reducer-user.js","reducers/reducer-fetch-channels.js","reducers/reducer-fetch-users.js","reducers/reducer-logout.js","reducers/reducer-send-message.js","reducers/reducer-fetch-channel-messages.js","reducers/index.js","reducers/reducer-set-channel-id.js","components/SideBar.js","components/MessageBox.js","components/App.js","components/Login.js","index.js"],"names":["ROOT_URL","setCurrentUser","user","res","axios","post","username","console","log","type","payload","logoutUser","theId","toString","user_Id","sendMessage","channel","message","content","fetchChannels","get","data","fetchUsers","fetchChannelMessages","channel_Id","setChannelId","initialState","name","active","message_Id","rootReducer","combineReducers","loggedInUser","state","action","availableChannels","onlineUsers","logoutUserStatus","sentMessage","channelMessages","currentChannelId","SideBar","this","props","map","ListGroup","Item","channelName","Col","sm","className","style","background","height","variant","renderChannelGroup","renderUserGroup","Component","connect","dispatch","bindActionCreators","MessageBox","renderChannelMessages","App","logoutClicked","event","history","push","messageText","key","target","value","refreshMessages","Container","fluid","Row","Button","size","onClick","InputGroup","onKeyUp","FormControl","id","Append","Login","submitLogin","setTimeout","md","placeholder","submitLoginButton","loggedinUser","store","applyMiddleware","promise","createStore","ReactDOM","render","reducers","exact","path","component","document","getElementById"],"mappings":"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","file":"static/js/main.99eee364.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport const SET_CURRENT_USER = 'set_current_user';\nexport const LOGOUT_USER = 'logout_user';\nexport const FETCH_CHANNELS = 'fetch_channels';\nexport const FETCH_CHANNEL_MESSAGES = \"fetch_channel_messages\";\nexport const CHANGE_CHANNEL = 'change_channel';\nexport const CREATE_DIRECT_CHAT = 'create_direct_chat';\nexport const UPDATE_ONLINE_USERS_STATUS = 'update_online_users_status';\nexport const FETCH_USERS = 'fetch_users';\nexport const SEND_A_MESSAGE = 'send_a_message';\nexport const SET_CHANNEL_ID = 'set_channel_id';\n\n\nconst ROOT_URL = 'http://localhost:5000/api'\n\n// log in a user. get back an id and active status\nexport function setCurrentUser(user) {\n\n  const res = axios.post(`${ROOT_URL}/login`, {username: user});\n  console.log('received from server-login: ', res)\n  return { type: SET_CURRENT_USER, payload: res}\n\n}//\n\nexport function logoutUser(theId) {\n  console.log('about to logout user', theId);\n  theId = theId.toString();\n  const res = axios.post(`${ROOT_URL}/logout`, {user_Id: theId});\n  console.log('received from server-logout: ', res)\n  return { type: LOGOUT_USER, payload: res}\n\n}\n\n// post a new message\nexport function sendMessage(user_Id, channel, message) {\nuser_Id = user_Id.toString();\nchannel = channel.toString();\n  const res = axios.post(`${ROOT_URL}/channels/${channel}/messages`, {user_Id: user_Id, content: message});\n  console.log('received from server-send-message ', res)\n  return { type: SEND_A_MESSAGE, payload: res}\n\n}\n// fetch current channels\nexport function fetchChannels() {\n\n  const res = axios.get(`${ROOT_URL}/channels`);\n  console.log('received from server-channels: ', res.data)\n  return { type: FETCH_CHANNELS, payload: res}\n\n}\n\nexport function fetchUsers() {\n\n  const res = axios.get(`${ROOT_URL}/users`);\n  console.log('received from server-users: ', res.data)\n  return { type: FETCH_USERS, payload: res}\n\n}\n \nexport function fetchChannelMessages(channel_Id) {\n  console.log(`channel messages with: ${ROOT_URL}/channels/${channel_Id}/messages`);\n  const res = axios.get(`${ROOT_URL}/channels/${channel_Id}/messages`);\n  console.log('received from channel messages: ', res.data)\n  return { type: FETCH_CHANNEL_MESSAGES, payload: res}\n\n}\n\nexport function setChannelId(channel_Id) {\n  return { type: SET_CHANNEL_ID, payload: channel_Id}\n}\n\n// junk drawer\n// axios({\n//   method: 'post',\n//   url: `http://localhost:5000/api/login`,\n//   data: {username: user}\n// }).then(function (response) {  \n//   console.log('received from server-login: ', response.data)\n//   return {\n//     type: SET_CURRENT_USER,\n//     payload: response.data\n//   }\n//   })\n// .catch(function (error) {console.log(error);})  \n\n// }\n// alternate request format \n\n//for testing only. not for normal use.\n// export function setCurrentUser(user) {\n  // return {\n    // type: SET_CURRENT_USER,\n    // payload: user \n  // }\n// }","import { SET_CURRENT_USER } from '../actions';\n\nconst initialState = {name : 'Please Log In', user_Id: 0, active: 0};\n\nexport default function (state = initialState, action) {\n  console.log('in reducer-user');\n\n  switch (action.type) {\n    case SET_CURRENT_USER:\n      console.log(\"setCurrentUser reducer has \", action.payload.data);\n      return {name: action.payload.data.username, \n        user_Id: action.payload.data.user_Id, \n        active: action.payload.data.active}\n    default:\n      return state;\n  }\n}","import { FETCH_CHANNELS } from '../actions';\n\n\nconst initialState =    [];\n\nexport default function (state = initialState, action) {\n  console.log('in reducer-fetch-channels');\n\n  switch (action.type) {\n    case FETCH_CHANNELS:\n      console.log(\"fetchChannels reducer has \", action.payload.data);\n      // return {channel_Id: action.payload.data.channel_Id,\n      //   channelName: action.payload.data.channelName,\n      //   firstUser_Id: action.payload.data.firstUser_Id,\n      //   secondUser_Id: action.payload.data.secondUser_Id};\n      return action.payload.data;\n\n    default:\n      return state;\n  }\n}","import { FETCH_USERS } from '../actions';\n\nconst initialState =    [];\n\nexport default function (state = initialState, action) {\n  console.log('in reducer-fetch-users');\n\n  switch (action.type) {\n    case FETCH_USERS:\n      console.log(\"fetchUsers reducer has \", action.payload.data);\n      // TODO filter out un-active users\n      return action.payload.data;\n\n    default:\n      return state;\n  }\n}","import { LOGOUT_USER } from '../actions';\n\nconst initialState = {user_Id: null};\n\nexport default function (state = initialState, action) {\n  console.log('in reducer-user');\n\n  switch (action.type) {\n    case LOGOUT_USER:\n      console.log(\"logoutUser reducer has \", action.payload.data);\n      return action.payload.data;\n    default:\n      return state;\n  }\n}","import { SEND_A_MESSAGE } from '../actions';\n\nconst initialState = {message_Id : 0, channel_Id: 0, user_Id: 0, content: ''};\n\nexport default function (state = initialState, action) {\n  // console.log('message reducer', action);\n  // console.log('in reducer-send-message');\n\n  switch (action.type) {\n    case SEND_A_MESSAGE:\n      console.log(\"---> send message reducer has \", action.payload.data);\n      // return {\n      //   message_Id: action.payload.data.message_Id, \n      //   channel_Id: action.payload.data.channel_Id,\n      //   user_Id: action.payload.data.user_Id, \n      //   content: action.payload.data.content}\n      return action.payload.data;\n    default:\n      return state;\n  }\n}","import { FETCH_CHANNEL_MESSAGES } from '../actions';\n\nconst initialState =    [];\n\nexport default function (state = initialState, action) {\n  console.log('in reducer-fetch-channel-messages');\n  console.log('channel message action packet', action);\n\n\n  switch (action.type) {\n    case FETCH_CHANNEL_MESSAGES:\n      console.log(\"fetch Channel Messages reducer has \", action.payload.data);\n      return action.payload.data;\n\n    default:\n      return state;\n  }\n}","import { combineReducers } from \"redux\";\nimport UserReducer from \"./reducer-user\";\nimport FetchChannels from \"./reducer-fetch-channels\";\nimport FetchUsers from \"./reducer-fetch-users\";\nimport LogoutUser from \"./reducer-logout\";\nimport SendMessage from \"./reducer-send-message\";\nimport FetchChannelMessages from \"./reducer-fetch-channel-messages\";\nimport SetChannelId from \"./reducer-set-channel-id\";\n\nconst rootReducer = combineReducers({\n  loggedInUser: UserReducer,\n  availableChannels: FetchChannels,\n  onlineUsers: FetchUsers,\n  logoutUserStatus: LogoutUser,\n  sentMessage: SendMessage,\n  channelMessages: FetchChannelMessages,\n  currentChannelId: SetChannelId\n});\n\nexport default rootReducer;\n","import { SET_CHANNEL_ID } from '../actions';\n\nconst initialState = 101;\n\nexport default function (state = initialState, action) {\n\n  switch (action.type) {\n    case SET_CHANNEL_ID:\n      \n      return action.payload;\n    default:\n      return state;\n  }\n}","import React, { Component, Fragment } from 'react';\nimport { connect } from \"react-redux\";\nimport { fetchChannels } from '../actions';\nimport { fetchUsers } from '../actions';\nimport { fetchChannelMessages} from '../actions';\nimport { bindActionCreators } from \"redux\";\nimport { ListGroup, Col } from 'react-bootstrap';\n\nclass SideBar extends Component {\n\n    componentDidMount() {\n        console.log('something should log')\n        this.props.fetchChannels();\n        this.props.fetchUsers();\n        // this.props.fetchChannelMessages(101);\n    }\n\n    //renders all channels\n    renderChannelGroup() {\n        let channels = this.props.availableChannels.map(channel => {\n            return (\n                <ListGroup.Item action>{channel.channelName}</ListGroup.Item>\n            )\n        });\n        return channels;\n    }\n    // render all users \n    renderUserGroup() {\n        let users = this.props.onlineUsers.map(user => {\n            return (\n                <ListGroup.Item action>{user.username}</ListGroup.Item>\n            )\n        });\n        return users;\n    }\n    render() {\n        return (\n<Fragment>\n    <Col sm={3}>\n        <div className=\"channels-list\" style={{ background: 'azure', height: 'auto' }}>\n            <ListGroup variant=\"flush\">\n                <ListGroup.Item variant=\"success\"><b>Channels</b></ListGroup.Item>\n                {this.renderChannelGroup()}\n                <ListGroup.Item>&nbsp;</ListGroup.Item>\n            </ListGroup>\n        </div>\n\n        <div className=\"users-list\" style={{ background: 'antiquewhite', height: 'auto' }}>\n            <ListGroup variant=\"flush\">\n                <ListGroup.Item variant=\"info\"><b>Users</b></ListGroup.Item>\n                {this.renderUserGroup()}\n            </ListGroup>\n        </div>\n    </Col>\n</Fragment>          \n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        availableChannels: state.availableChannels,\n        onlineUsers: state.onlineUsers\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators(\n        {\n            fetchChannels,\n            fetchUsers,\n            // fetchChannelMessages\n        },\n        dispatch\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SideBar);\n\n\n","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { fetchChannelMessages, setChannelId } from '../actions';\nimport { bindActionCreators } from \"redux\";\nimport { ListGroup } from 'react-bootstrap';\n\nclass MessageBox extends Component {\n\n    componentDidMount() {\n        console.log('component should mount')\n        this.props.fetchChannelMessages(this.props.currentChannelId);\n    }\n\n    // renders all messages for a channel\n    renderChannelMessages() {\n        console.log('props are', this.props);\n        let messages = this.props.channelMessages.map(message => {\n            return (\n                <ListGroup.Item>{message.username}: {message.content}</ListGroup.Item>\n            )\n        });\n        return messages;\n    }\n\n    render() {\n        return (\n            <div className=\"chat-window\" style={{ background: 'snow', height: '90%' }}>\n                <ListGroup variant=\"flush\">\n                    {this.renderChannelMessages()}\n                </ListGroup>\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        channelMessages: state.channelMessages,\n        currentChannelId: state.currentChannelId\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators(\n        {\n            fetchChannelMessages,\n            setChannelId\n        },\n        dispatch\n    );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MessageBox);\n\n\n","import React, { Component } from 'react';\n// import { setState, useState, useRef, useEffect } from \"react\";\n// import socketio from 'socket.io-client';\nimport { connect } from \"react-redux\";\nimport { fetchChannels } from '../actions';\nimport { fetchUsers } from '../actions';\nimport { logoutUser } from '../actions';\nimport { sendMessage } from '../actions';\nimport { fetchChannelMessages } from '../actions';\nimport { setChannelId } from '../actions';\nimport { setCurrentUser } from '../actions';\nimport { bindActionCreators } from \"redux\";\nimport { Row, Container, ListGroup, Col, InputGroup, FormControl, Button } from 'react-bootstrap';\nimport SideBar from './SideBar';\nimport MessageBox from './MessageBox';\n\nconst server = 'http://localhost:5000/'\n\nclass App extends Component {\n\n  componentDidMount(){\n      // const [state, setState] = useState({name: this.props.loggedInUser.name, message: ''})\n      // const [chat, setChat] = useState([])\n      \n      if (this.props.loggedInUser.user_Id === 0) {\n        console.log('yup, I actually went here');\n        this.props.history.push('/login');\n      }\n      //fill the store //\n      this.props.fetchChannels();\n      this.props.fetchChannelMessages(this.props.currentChannelId);\n      this.props.fetchUsers();\n\n      // console.log('after fetch avail channels: ', this.props.availableChannels);\n      // console.log('after fetch online users: ', this.props.onlineUsers);\n      // console.log('after fetch channel messages: ', this.props.channelMessages);\n\n      console.log(\"App.js props are \",  this.props);\n    }\n\n\nlogoutClicked = (event) => {\n    console.log('logout button clicked for ', this.props.loggedInUser.user_Id);\n    this.props.logoutUser(this.props.loggedInUser.user_Id);\n    this.props.setCurrentUser(0);\n    console.log('logout response is: ', this.props.logoutUserStatus);\n    this.props.history.push('/login');\n  };\n\n// TO DO as a separate component?\n\n// renderChat = () => {  \n//   return chat.map(({name, message}, index) => (\n//       <div key={index}>\n//           <li>{name}: <span>{message}</span></li>\n//       </div>\n//   ))\n// }\n\nmessageText = (event) => {\n\n  // setState({...this.state, message: event.target.value});  // for to make button work// make regular var?\n  \n  if (event.key === \"Enter\") {\n    // setState({...this.state, message: event.target.value});  // for to make button work // make regular var?\n    this.props.sendMessage(this.props.loggedInUser.user_Id, this.props.currentChannelId, event.target.value);\n    console.log('the send message return', this.props.sentMessage);\n    this.props.fetchChannelMessages(this.props.currentChannelId);\n    //TODO - add to chat\n    // let name = {name : props.loggedInUser.name};\n    // let message = {message : event.target.value };\n    // setChat([...chat, {name, message}])\n    event.target.value='';\n  };\n}\nrefreshMessages = () => {\n  this.props.fetchChannelMessages(this.props.currentChannelId);\n};\n\n\nrender() {\n  return ( \n    <Container fluid>\n    <Row>&nbsp;</Row>\n    <Row>\n      <SideBar/>\n    <Col sm={9}>\n    <Button variant=\"outline-dark\" size=\"sm\" className=\"float-right\" onClick={this.logoutClicked}><b>Logout</b> {this.props.loggedInUser.name}</Button>\n    <h4>General Channel</h4>\n    <MessageBox/>\n    <div className=\"message-composer\" style={{background: 'silver', height: 'auto'}}>\n      <InputGroup onKeyUp={this.messageText}>\n      <FormControl name='message' id='messageId'></FormControl>\n    <InputGroup.Append><Button onClick={this.refreshMessages}>Refresh Messages</Button></InputGroup.Append></InputGroup></div>\n    </Col>\n    </Row>\n  </Container>\n  \n  )};\n}\n\nfunction mapStateToProps(state) {\n  return { \n    loggedInUser: state.loggedInUser,\n    availableChannels: state.availableChannels,\n    onlineUsers: state.onlineUsers,\n    logoutUserStatus: state.logoutUserStatus,\n    sentMessage: state.sentMessage,\n    channelMessages: state.channelMessages,\n    currentChannelId: state.currentChannelId\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      fetchChannels,\n      fetchUsers,\n      logoutUser,\n      sendMessage,\n      fetchChannelMessages,\n      setChannelId,\n      setCurrentUser \n    },\n    dispatch\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps) (App);\n\n\n","import React, {Component} from 'react';\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { setCurrentUser } from '../actions';\nimport { Row, Container, Col, InputGroup, FormControl, Button } from 'react-bootstrap';\n\n\n\n \nclass Login extends Component {\n\nsubmitLogin = (event) => {\n  console.log(event.target.value);\n    if (event.key === \"Enter\") {\n      this.props.setCurrentUser(event.target.value);\n      \n      //insert delay or promise here?\n      setTimeout(this.props.history.push('/'), 5000);\n    }\n  };\nsubmitLoginButton() {\n  console.log('clicked it')\n}\n\n\nrender() {\n  return (\n    <div>\n    <Container fluid>\n    \n      <Row>&nbsp;</Row>\n      <Row>\n        <Col></Col>\n      <Col md=\"auto\">\n        <h2>PROJECT SLACK by COHORT X</h2>\n      <h3>Enter your name to join:</h3>\n      <InputGroup className=\"mb-3\" onKeyUp={this.submitLogin} name=\"login-form\"><FormControl placeholder=\"Your name\"></FormControl></InputGroup>\n      <Button variant=\"outline-dark\" onClick={this.submitLoginButton} className=\"float-right\">Login</Button>\n      </Col>\n      <Col></Col>\n      </Row>\n          </Container>\n      </div>    \n        \n  );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return { loggedInUser: state.loggedinUser}\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      setCurrentUser\n    },\n    dispatch\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n ","import React, { Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport promise from 'redux-promise';\nimport reducers from './reducers';\nimport App from './components/App';\nimport Login from './components/Login';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nconst store = applyMiddleware(promise)(createStore);\n\nReactDOM.render(\n<Provider store={store(reducers)}>\n<Router>\n  <Fragment>\n      <Switch>\n        <Route exact path=\"/\" component={App} />\n        <Route exact path=\"/login\" component={Login} />\n      </Switch>\n  </Fragment>\n</Router>\n</Provider>,document.getElementById(\"root\")\n);\n"],"sourceRoot":""}